创建数组的两种方法：
let arr = new Array();//使用构造函数
let arr = [];

数组是一种特殊的对象，适用于存储和管理有序的数据项，作用于有序数据的特殊结构。
数组元素从0开始。
数组中可以存储任何类型的元素（包括基本数据类型和复杂数据类型object）。

1.常用数组方法（可以思考一下操作之后数组不变还是创建一个新的数组来存放修改后的元素？？？）：
a.push在数组末尾添加元素
let fruits = ["Apple", "Orange"];
fruits.push("Pear");
alert( fruits ); // Apple, Orange, Pear

b.pop取出并返回数组的最后一个元素
let fruits = ["Apple", "Orange", "Pear"];
alert( fruits.pop() ); // 移除 "Pear" 然后 alert 显示出来
alert( fruits ); // Apple, Orange

c.shift取出并返回数组的第一个元素
let fruits = ["Apple", "Orange", "Pear"];
alert( fruits.shift() ); // 移除 Apple 然后 alert 显示出来
alert( fruits ); // Orange, Pear

d.unshift在数组的前端添加元素（添加多个元素用,隔开）
let fruits = ["Orange", "Pear"];
fruits.unshift('Apple');
alert( fruits ); // Apple, Orange, Pear

push/pop 方法运行的比较快，而 shift/unshift 比较慢(可以参考Java中的数组操作，需要移动元素)。

e.splice删除元素（不是新数组）
array.splice(start[, deleteCount[, item1[, item2[, ...]]]]) //(deleteCount,item可选)
从索引start开始，删除deleteCount个元素，并在当前位置插入item1,...，最后返回已删除元素后的数组。
let arr = ["I", "study", "JavaScript", "right", "now"];

// remove 3 first elements and replace them with another
arr.splice(0, 3, "Let's", "dance");

alert( arr ) // now ["Let's", "dance", "right", "now"]

f.slice删除元素（创建新数组返回）
arr.slice(start, end) //end可选；从索引start开始复制，到end（不包括end）返回一个新数组。原数组arr不变。
let arr = ["I", "study", "JavaScript", "right", "now"];

alert(arr.slice(1,3)) // ["study", "JavaScript"]
alert(arr.slice(1)) //["study", "JavaScript", "right", "now"]

g.concat将数组和其他数组或元素结合
arr.concat(arg1, arg2...) //接受任意数量参数——数组或元素

let arr = ["I", "study", "JavaScript"];
alert(arr.concat(["right", "now"])) // ["I", "study", "JavaScript", "right", "now"]

h.查询数组indexOf/lastIndexOf 和 includes
arr.indexOf(item, from) 从索引 from 查询 item，如果找到返回索引，否则返回 -1。
arr.lastIndexOf(item, from) — 和上面相同，只是从尾部开始查询。
arr.includes(item, from) — 从索引 from 查询 item，如果找到则返回 true。

i.find和findIndex 查询arr中具有特定条件的对象
let result = arr.find(function(item, index, array) {
  // 如果查询到返回 true
});



2.循环
for循环（速度最快）和for...of
let fruits = ["Apple", "Orange", "Plum"];

// 迭代数组元素
for (let fruit of fruits) {
  alert( fruit );
}

3.length
数组的长度属性。






